/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package echogui;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.PointerInfo;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Trey
 */
public class FRONTEND extends javax.swing.JDialog {
    
    /**
     * Creates new form NewJDialog
     */
    public FRONTEND(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jToggleButton2 = new javax.swing.JToggleButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("SPS SOS Echo Client GUI");

        jButton1.setText("SOS On");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("SOS Off");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Write the name of the playlist you want to open with proper syntax");

        jButton3.setText("Open Playlist");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Current Playlist");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel3.setText("Write the number of the clip you want to play");

        jButton5.setText("Play Clip");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Audio Mute");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Audio Unmute");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Get Clip Info");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel4.setText("Made by Trey Collins '15");

        jToggleButton2.setText("Unbind Sphere from Mouse");

        jLabel6.setText("/home/sos/sosrc/SPS_SOS_2015.sos");

        jLabel7.setText("Common Playlists:");

        jLabel8.setText("/home/sos/sosrc/Taylor_Poulos.sos");

        jToggleButton1.setText("Bind Sphere to Mouse");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton3.setText("Pause/Unpause Sphere");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        jToggleButton4.setText("Zrotation Off/On");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });

        jLabel5.setText("Set FPS");

        jTextField4.setText(" ");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jButton9.setText("Set");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel9.setText("Set ZFPS");

        jTextField5.setText(" ");
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jButton10.setText("Set");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        jSlider1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                jSlider1AncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel10.setText("Volume");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField1)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jLabel3)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jToggleButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jToggleButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton9))
                            .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton10))))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(144, 144, 144))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField3)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(143, 143, 143))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton6)
                            .addComponent(jButton4)
                            .addComponent(jToggleButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)
                            .addComponent(jButton7)
                            .addComponent(jToggleButton4))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))
                    .addComponent(jButton8))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))
                        .addGap(7, 7, 7)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addGap(2, 2, 2)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton2)
                    .addComponent(jToggleButton1))
                .addGap(10, 10, 10)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        out.println("open_playlist /home/sos/sosrc/SPS_SOS_2015.sos");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        out.println("play 1");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        out.println("open_playlist /home/sos/sosrc/SPS_SOS_2015.sos");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        out.println("play 2");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        String playlist = jTextField1.getText();
        out.println("open_playlist " + playlist);
        jTextField1.setText("");
         try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTextField2.setText("");
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        String clip = jTextField2.getText();
        out.println("play " + clip);
        jTextField2.setText("");
         try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTextField2.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        out.println("audio mute");
         try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        out.println("audio unmute");
         try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here: 
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        out.println("get_playlist_name");
         try {
            String playlistName = in.readLine();
            jTextField3.setText(playlistName);
            out.println("get_clip_list_from_file " + playlistName);
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        out.println("get_clip_number");
        jTextArea1.setText(" ");
       
        //thenumber = in.readLine();
        //int numbers =  Integer.parseInt(thenumber);
        for (int i=1;i<52;i++){
            out.println("get_clip_info " + i);
            try {
                String clipInfo = in.readLine();
                jTextArea1.append((i-1) + ": " + clipInfo + "\n");
            } catch (IOException ex) {
                Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            System.out.println(i);
            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
            }
            } 
        
    }//GEN-LAST:event_jButton8ActionPerformed
    
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        /* TODO add your handling code here:
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        while (jToggleButton2.isSelected() == false){
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(jToggleButton1.isSelected() == true){
                for(int i = 1;i<10;i++){
                PointerInfo a = MouseInfo.getPointerInfo();
                Point b = a.getLocation();
                double y = (((double) b.getX())/3.8)-180;
                double x = (180-((double) b.getY())/2.1);
                out.println("set_tilt " + x + ", 0" +", " + y );
                try {
                System.out.println(in.readLine());
               
            } catch (IOException ex) {
                Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
            } 
                }
            }
            
            
            
            }
            if(jToggleButton2.isSelected() == true){
                out.println("set_tilt 0, 0, 0" );
            }*/
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        // TODO add your handling code here:
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(jToggleButton3.isSelected() == true){
            out.println("pause");
            try {
                System.out.println(in.readLine());
            } catch (IOException ex) {
                Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
        out.println("play");
            try {
                System.out.println(in.readLine());
            } catch (IOException ex) {
                Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(jToggleButton4.isSelected() == true){
            out.println("zrotationenable 0");
            try {
                System.out.println(in.readLine());
            } catch (IOException ex) {
                Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
        out.println("zrotationenable 1");
            try {
                System.out.println(in.readLine());
            } catch (IOException ex) {
                Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        String fps = jTextField4.getText();
        out.println("set_frame_rate " + fps);
        jTextField4.setText("");
         try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
        out.println("enable");
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
	BufferedReader stdIn = new BufferedReader(
                                   new InputStreamReader(System.in));
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        String fps = jTextField5.getText();
        out.println("zfps" + fps);
        jTextField5.setText("");
         try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jSlider1AncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jSlider1AncestorMoved
       
    }//GEN-LAST:event_jSlider1AncestorMoved

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // TODO add your handling code here:
         // TODO add your handling code here:
        Socket sosSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;
        InetAddress SOS = null;
        try {
            SOS = InetAddress.getByName("10.10.111.30");
        } catch (UnknownHostException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("program running");
        try {
            sosSocket = new Socket(SOS, 2468);
            out = new PrintWriter(sosSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(
                                        sosSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host: localhost.");
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for "
                               + "the connection to: localhost.");
            System.exit(1);
        }
        System.out.println("Connected");
        out.println("enable");
        int x = jSlider1.getValue();
        String y = String.valueOf(x);
        out.println("audio " + y);
        try {
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(FRONTEND.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jSlider1StateChanged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FRONTEND.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FRONTEND.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FRONTEND.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FRONTEND.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FRONTEND dialog = new FRONTEND(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    // End of variables declaration//GEN-END:variables
}
